DSA Lab Programs

Q1.Write a C program to print preorder, inorder, and postorder traversal on Binary Tree.  
Solution:
#include <stdio.h>
#include <stdlib.h>
struct node{
    int data;
    struct node* left;
    struct node* right;
};
void inorder(struct node*root)
{
    if(root==NULL)
        return;
    inorder(root->left);
    printf(" %d ",root->data);
    inorder(root->right);
}
void preorder(struct node*root)
{
    if(root==NULL)
           return;
    printf(" %d ",root->data);
    preorder(root->left);
    preorder(root->right);
}
void postorder(struct node*root)
{
    if(root==NULL)
             return;
    postorder(root->left);
    postorder(root->right);
    printf(" %d ",root->data);
}
struct node*createnode(int valve)
{
    struct node*new=malloc(sizeof(struct node));
    new->data=valve;
    new->left=NULL;
    new->right=NULL;
    return new;
}
void main()
{
    struct node*root=createnode(25);
    root->left=createnode(45);
    root->right=createnode(21);
    root->left->left=createnode(2);
    root->left->right=createnode(30);
    printf("The Inorder traversal is:");
    inorder(root);
    printf("\n The preorder traversal is:");
    preorder(root);
    printf("\nThe Postorder traversal is:");
    postorder(root);
}

Output:The Inorder Traversal is:2  45  30  25  21
            The proder traversal is:25  45  2  30  21
            The Postorder traversal is: 2  30  45  21  25

    
    
Q2.Write a C program to create (or insert) and inorder traversal on Binary Search Tree.
Solution:
#include<stdio.h>
#include<stdlib.h>
struct node {
    int data;
    struct node* left;
    struct node* right;
};
struct node *newnode(int item)
{
    struct node *temp =  (struct node *)malloc(sizeof(struct node));
    temp->data = item;
    temp->left = temp->right = NULL;
    return temp;
}
struct node*  insert(struct node *node, int x)
{
    if (node == NULL) 
       return newnode(x);
    if (x < node->data)
        node->left  = insert(node->left, x);
    else if (x > node->data)
        node->right = insert(node->right, x);    
    return node;
}  
void inorder(struct node* root)
{
    if(root == NULL)
           return;
    inorder(root->left);
    printf("%d ", root->data);
    inorder(root->right);
}
void main()
{
    struct node *root = NULL;
    root = insert(root, 10);
    insert(root, 20);
    insert(root, 5);
    insert(root, 14);
    insert(root, 24);
    insert(root, 35);
    insert(root, 66);
    printf("The inorder traversal of  binary search tree is:");
    inorder(root);
}

Output:The inorder traversal of  binary search tree is:5  10  14  20  24  35  66

Q3.Write a C program depth first search (DFS) using array.
Solution:
#include<stdio.h>
int a[10][10], visited[10],n;
void depthfirst(int m)
{
  int j;
  printf("\n %d", m);
  visited[m]=1;
  for(j = 0; j < n; j++)
  {
    if(!visited[j] && a[m][j] == 1)
      depthfirst(j);
  }
}

void main()
{
  int i,j;
  printf("Enter number of vertices:");
  scanf("%d", &n);
  printf("\nEnter adjacency matrix of the graph:");
  for(i=0; i<n; i++)
  {
      for(j=0; j<n; j++)
      {
         printf("Enter a[%d][%d]:",i,j);
         scanf ("%d", &a[i][j]);
      }
	
  }
  for(i = 0; i < n; i++)
    visited[i] = 0;
  depthfirst(0);
}

Output:Enter number of vertices:2
            Enter Adjacency matrix of the graph:
            Enter a[o][0]:1
            Enter a[o][1]:0
            Enter a[1][0]:0
            Enter a[1][1]:1
            0

Q4.Write a C program breath first search (BFS) using array.
Solution:

#include<stdio.h>
int a[10][10],b[10],visited[10],n,i,j,f=0,r=-1;
void breadthfirst(int m)
{
  for(i=1; i<=n; i++)
  {
     if(a[m][i] && !visited[i])
        b[++r] = i;
     if(f<=r)
     {
       visited[b[f]] = 1;
       breadthfirst(b[f++]);
     }
  }
}

void main()
{
  int k;
  printf("\n Enter number of vertices:");
  scanf("%d",&n);
  for(i=0; i<n; i++)
  {
      b[i]=0;
      visited[i]=0;
  }
  printf ("\n Enter graph data in matrix form:\n");
  for(i=0; i<n; i++)
  {
    for(j=0; j<n; j++)
    {
      printf("Enter a[%d][%d]:",i,j);
      scanf("%d",&a[i][j]);
    }
  }
  printf("\n Enter the starting vertex:");
  scanf("%d",&k);
  breadthfirst(k);
  printf("\n nodes reached are:\n");
  for(i=1; i<=n; i++)
  {
    if(visited[i])
      printf("%d ",i);
    else
      printf("\n breadthfirst search is not possible");
  }
}

Output:
Enter number of vertices:2
Enter graph data in matrix form:
 Enter a[o][0]:1
 Enter a[o][1]:0
 Enter a[1][0]:0
 Enter a[1][1]:1
Enter the starting vertex:1
nodes reached are :1
Bradth first search is not possible




Q5.Write a C program for linear search algorithm.
Solution.
#include <stdio.h>
void main()
{
    int a[100],k,i,bool=0,n;
    printf("Enter the size of the array,element to search: ");
    scanf("%d,%d",&n,&k);
    for(i=0; i<n;  i++)
   {
        printf("Enter a[%d]:",i);
        scanf("%d",&a[i]);
    }
    for(i=0;i<n;i++)
   {
        if(a[i]==k)
       {
            bool=1;
            break;
        }
    }
    if(bool==1)
        printf("%d found at position %d",k,i+1);
    else
        printf("Element  not found");
}
Output:
Enter the size of the array,element to search:3,21
 Enter a[o]:11
 Enter a[1]:21
 Enter a[2]:32
21 found at position 2

    


Q6.Write a C program for binary search algorithm.
Solution:
#include <stdio.h>
void main()
{
  int i,first,last,middle,n,k,a[100];

  printf("Enter array size,element to search:");
  scanf("%d,%d",&n,&k);
  for(i=0; i<n; i++)
  {
    printf("enter a[%d]:",i);
    scanf("%d",&a[i]);
  }
  first=0;
  last=n-1;
  middle=(first+last)/2;
  while(first<=last)
  {
    if(a[middle]<k)
      first=middle+1;
    else if(a[middle]==k)
    {
      printf("%d found at position %d\n",k,middle+1);
      break;
    }
    else
      last=middle - 1;

    middle=(first+last)/2;
  }
  if(first>last)
    printf("Element not found");

}

Output:
Enter the size of the array,element to search:3,34
 Enter a[o]:65
 Enter a[1]:54
 Enter a[2]:34
34 found at position 3

